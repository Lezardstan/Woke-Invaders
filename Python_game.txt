import tkinter as tk
from tkinter import PhotoImage 

#Les deux classes Mob et Player, il manque encore Bullet pour les balles, en gros on définit des objets "types", des sortes de modèles
class Mobs:
    def __init__(self, x_position, life):
        self.x_position = x_position
        self.image = parent_mob
        self.life = life
    def destroy(self): # Cette fonction permettrait de détruire l'objet en cas de déclenchement de la fonction
        del self # A tester
            
        
class Player:
    def __init__(self, position, life):
        self.position = position
        self.image = player_image
        self.life = life
        parent_player.pack()



class Bullets:
    def __init__(self, b_position):
        self.position = b_position

# Là c'est un menu pause qui se  déclenche en appuyant sur la touche echap
def pause_menu():
    print("Entered pause menu")
    pause = tk.Toplevel()
    pause.geometry("200x200+500+300")
    pause.title("PAUSE")
    pause.configure(background="white")
    restart = tk.Button(pause, text="Reprendre", command=pause.destroy) #Créatioin du boutton pour reprendre, qui, si cliqué, détruit le menu pause
    quit_button = tk.Button(pause,text="Quitter", command=main.quit) #Création du boutton pour quitter le jeu, qui si enclenché effectue la command "quit" qui ferme le programme, on pourrait mettre une infobulle de confirmation avant pour éviter le misclick
    restart.pack()
    quit_button.pack()
    pause.grab_set() #Grabset let en pause la fenetre principale et empeche les input d'arriver dans la fenetre principale

# Ici on détermine ce qu'on fait suivant les touches pressées
def keypress(event):
    if event.keysym == "d": #La touche "d" pour aller à droite
        player.position += 1
        print(player.position)
    if event.keysym == "q": #La touche "q" pour aller à gauche
        player.position -= 1
        print(player.position)
    if event.keysym == "Escape": #La touche échap pour mettre le menu pause
        pause_menu()
    print(event.keysym)

# Gestion du temps, qui permet de checker les différentes fonctions toutes les x secondees en se rappelant elle même (ici 50ms)
def ticking(t):
    if t == 1:
        print(t)
        t += 1
    elif t == 50:
        print (t)
        t = 0
    check_collision()
    direction_mobs()
    move_mob()
    main.after(50, ticking(t))


# Gestion collision balles/mob ou balles/player
def check_collision():
    for bullet in Bullets:
        if bullet.position == player.position: # Si la position de la balle est au niveau du joueur:
            bullet.destroy() # on détruit la balle testée
            player.life -= 1 # on décrémente le compteur de vie du joueur
        for mob in Mobs:
            if bullet.position == mob.x_position: # Si la position de la balle est égale à la positiond 'un mob
                mob.destroy # On détruit le mob concerné
                bullet.destroy() # on détruit la balle testée

# déplacement des mobs:
# Si la variable "direction" est de 1, les mobs vont vers la droite (mob.position + 1)
# Sinon il vont à gauche (mob.position - 1)
def move_mob():
    for mob in Mobs:
        mob.x_position = mob.x_position + direction 

# Fonction pour changer la direction si un des mobs touche le bord de l'écran
def direction_mobs():
    for mob in Mobs:
        if mob.x_position == 700: # Si il touche le bord droit, on définit la direction vers la gauche
            direction = -1
        if mob.x_position == 0: # Sinon on définit vers la droite
            direction = 1
#Initialisations des variables:

#chemin du dossier en dur - Possibilité de le faire en automatique avec une fonction éventuellement
path = "C:/Users/RDP_Access/Documents/SUPPORTS DE COURS/Découverte du code - Robotique Python/fsi-main/"

global reverse
global ticks
global direction
ticks = 0
reverse = 0
direction = 1


# Chemin d'accès des images
mob_img_path = f"{path}mob.png"
player_img_path =f"{path}player.png"
bullet_img_path = f"{path}bullet.png"

# Chargement des images dans le programme
mob_image = PhotoImage(file=mob_img_path)
player_image = PhotoImage(file=player_img_path)

# Création des sprites dans des objets Label
parent_player = tk.Label(main, image=player_image)
parent_mob = tk.Label(main, image=mob_image)




# Création des objets grâce aux classes
mob1 = Mobs(1, 1)
mob2 = Mobs(2, 1)
mob3 = Mobs(3, 1)
mob4 = Mobs(4, 1)
mob5 = Mobs(5, 1)
player = Player(10, 3)

# Création de la fenêtre principale
main = tk.Tk()
main.title("Space Invaders")
main.geometry("700x500+300+200")
main.configure(background="black")

parent_mob.pack()
parent_player.pack()

# ça c'est l'outil pour déclencher des évenement:
# Quand une touche est pressée:
main.bind("<Key>", keypress)

# Le temps qui passe, permet de lancer la fonction qui va tourner en boucle toutes les secondes 
# Pour updater les positions (voir la fonction ticking)
ticking(0)
# La loop principale de la fenêtre
main.mainloop()
